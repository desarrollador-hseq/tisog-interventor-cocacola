// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  ADMIN
  USER
  VIEWER
}

model User {
  id String @id @default(uuid())

  email String @unique

  name     String?
  numDoc   String?
  password String?

  role Role @default(USER)

  // contractorId String?
  // contractor   Contractor? @relation(fields: [contractorId], references: [id])

  active Boolean @default(true)

  isMaster Boolean @default(false)

  receiveNotifications Boolean @default(true)

  passwordResetTokens PasswordResetToken[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // @@index([contractorId])
  controlReport ControlReport[]
}

model PasswordResetToken {
  id      String    @id @default(uuid())
  token   String    @unique
  resetAt DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@index([userId])
}

model Contractor {
  id String @id @default(uuid())

  name String
  nit  String?

  cityId String?
  city   City?   @relation(fields: [cityId], references: [id])

  // supervisors User[]
  controls  ControlReport[]
  accidents Accidents[]

  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cityId])
}

enum FindingStatus {
  OPEN
  CLOSED
  CANCELED
}

enum FindingLevel {
  LOW
  MEDIUM
  HIGH
}

enum FindingTypeAction {
  CORRECTIVE
  IMPROVEMENT
}




model FindingReport {
  id String @id @default(uuid())

  findingDesc String? @db.Text

  controlReportId String?
  controlReport   ControlReport? @relation(fields: [controlReportId], references: [id])

  securityQuestionId String
  securityQuestion   SecurityQuestion @relation(fields: [securityQuestionId], references: [id])

  proposedClosureDate DateTime?
  actualClosureDate   DateTime?

  typeAction      FindingTypeAction? @default(CORRECTIVE)
  actionToTake    String?
  actionInmediate String?

  findingLevel FindingLevel? @default(LOW)

  status FindingStatus @default(OPEN)

  imgUrl String?

  // active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([securityQuestionId])
  @@index([controlReportId])
}

enum ControlTypeRisk {
  CHEMICAL_RISK
  ELECTRICAL_RISK
  MECHANICAL_RISK
  SAFE_TRANSIT
  ORDER_AND_CLEANLINESS
  ROAD_BEHAVIOR
  PPE_USE
  ERGONOMICS_AND_STORAGE
  WASTE_MANAGEMENT
  HIGH_RISK_TASKS
}

model ControlReport {
  id String @id @default(uuid())

  source String?

  description String? @db.Text

  businessAreaId String?
  businessArea   BusinessAreas? @relation(fields: [businessAreaId], references: [id])

  tool Tool[]

  findingReport FindingReport[]

  contractorId String?
  contractor   Contractor? @relation(fields: [contractorId], references: [id])

  controllerId String?
  controller   User?   @relation(fields: [controllerId], references: [id])

  generalAspects ChecklistItem[]

  personNameUnsafe String?
  personDocUnsafe  String?

  date DateTime?

  exactLocation String?

  typeRisk ControlTypeRisk?

  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([contractorId])
  @@index([controllerId])
  @@index([businessAreaId])
}

model SecurityCategory {
  id String @id @default(uuid())
  num Int? @default(0)

  name String @unique

  questions SecurityQuestion[]

  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AccidentType {
  ACCIDENT
  INCIDENT
}

enum AccidentOrigin {
  ACT
  CONDITION
}

enum AccidentClassification {
  FIRST_AID
  MEDICAL_TREATMENT
  LOST_WORKDAY
  NEAR_MISS
}

enum AccidentStatus {
  OPEN
  CLOSED
}

model Accidents {
  id String @id @default(uuid())

  date DateTime
  // num  Int

  type AccidentType @default(ACCIDENT)

  contractorId String?
  contractor   Contractor? @relation(fields: [contractorId], references: [id])

  origin AccidentOrigin @default(ACT)

  classification AccidentClassification @default(FIRST_AID)

  level Int

  name      String?
  numDoc    String?
  birthdate DateTime?
  position  String?

  areaId String?
  area   BusinessAreas? @relation(fields: [areaId], references: [id])

  desc       String? @db.Text
  typeInjury String? @db.Text

  correction       String?   @db.Text
  correctiveAction String?   @db.Text
  closedDate       DateTime?

  status AccidentStatus @default(OPEN)

  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([contractorId])
  @@index([areaId])
}

model SecurityQuestion {
  id String @id @default(uuid())

  question         String @db.Text
  negativeQuestion String @db.Text

  categoryId String?
  category   SecurityCategory? @relation(fields: [categoryId], references: [id])

  checklistItems ChecklistItem[]
  findingReports FindingReport[]

  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

enum QualificationCriteria {
  C
  NC
  NA
}

model ChecklistItem {
  id String @id @default(uuid())

  controlReportId String?
  controlReport   ControlReport? @relation(fields: [controlReportId], references: [id])

  securityQuestionId String?
  securityQuestion   SecurityQuestion? @relation(fields: [securityQuestionId], references: [id])

  day1 QualificationCriteria @default(NA)
  day2 QualificationCriteria @default(NA)
  day3 QualificationCriteria @default(NA)
  day4 QualificationCriteria @default(NA)
  day5 QualificationCriteria @default(NA)
  day6 QualificationCriteria @default(NA)
  day7 QualificationCriteria @default(NA)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([controlReportId])
  @@index([securityQuestionId])
}

model Tool {
  id String @id @default(uuid())

  name String

  toolDefaultId String?
  toolDefault   DefaultTool? @relation(fields: [toolDefaultId], references: [id])

  controlReportId String?
  controlReport   ControlReport? @relation(fields: [controlReportId], references: [id])

  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([controlReportId])
  @@index([toolDefaultId])
}

model TypeTool {
  id String @id @default(uuid())

  name String

  defaultTool DefaultTool[]

  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DefaultTool {
  id   String  @id @default(uuid())
  name String
  desc String?

  typeToolId String
  typeTool   TypeTool @relation(fields: [typeToolId], references: [id])

  active Boolean @default(true)

  tools Tool[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([typeToolId])
}

model BusinessAreas {
  id String @id @default(uuid())

  name String @unique

  controlReport ControlReport[]

  accidents Accidents[]

  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id String @id @default(uuid())

  realName  String
  formatted String?

  contractors Contractor[]

  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
